//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.208
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace PicoDeltaSilverlightClient.PicoDeltaService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PicoDeltaService.IPicoDelta")]
    public interface IPicoDelta {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPicoDelta/GetHashesForFile", ReplyAction="http://tempuri.org/IPicoDelta/GetHashesForFileResponse")]
        System.IAsyncResult BeginGetHashesForFile(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<long, PicoDeltaSl.FileHash> EndGetHashesForFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPicoDelta/DownloadCurrentConfig", ReplyAction="http://tempuri.org/IPicoDelta/DownloadCurrentConfigResponse")]
        System.IAsyncResult BeginDownloadCurrentConfig(System.AsyncCallback callback, object asyncState);
        
        PicoDeltaSl.Config EndDownloadCurrentConfig(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPicoDelta/UploadManifest", ReplyAction="http://tempuri.org/IPicoDelta/UploadManifestResponse")]
        System.IAsyncResult BeginUploadManifest(System.AsyncCallback callback, object asyncState);
        
        void EndUploadManifest(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPicoDeltaChannel : PicoDeltaSilverlightClient.PicoDeltaService.IPicoDelta, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetHashesForFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetHashesForFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<long, PicoDeltaSl.FileHash> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<long, PicoDeltaSl.FileHash>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DownloadCurrentConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DownloadCurrentConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PicoDeltaSl.Config Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PicoDeltaSl.Config)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PicoDeltaClient : System.ServiceModel.ClientBase<PicoDeltaSilverlightClient.PicoDeltaService.IPicoDelta>, PicoDeltaSilverlightClient.PicoDeltaService.IPicoDelta {
        
        private BeginOperationDelegate onBeginGetHashesForFileDelegate;
        
        private EndOperationDelegate onEndGetHashesForFileDelegate;
        
        private System.Threading.SendOrPostCallback onGetHashesForFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginDownloadCurrentConfigDelegate;
        
        private EndOperationDelegate onEndDownloadCurrentConfigDelegate;
        
        private System.Threading.SendOrPostCallback onDownloadCurrentConfigCompletedDelegate;
        
        private BeginOperationDelegate onBeginUploadManifestDelegate;
        
        private EndOperationDelegate onEndUploadManifestDelegate;
        
        private System.Threading.SendOrPostCallback onUploadManifestCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public PicoDeltaClient() {
        }
        
        public PicoDeltaClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PicoDeltaClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PicoDeltaClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PicoDeltaClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetHashesForFileCompletedEventArgs> GetHashesForFileCompleted;
        
        public event System.EventHandler<DownloadCurrentConfigCompletedEventArgs> DownloadCurrentConfigCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UploadManifestCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PicoDeltaSilverlightClient.PicoDeltaService.IPicoDelta.BeginGetHashesForFile(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetHashesForFile(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<long, PicoDeltaSl.FileHash> PicoDeltaSilverlightClient.PicoDeltaService.IPicoDelta.EndGetHashesForFile(System.IAsyncResult result) {
            return base.Channel.EndGetHashesForFile(result);
        }
        
        private System.IAsyncResult OnBeginGetHashesForFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((PicoDeltaSilverlightClient.PicoDeltaService.IPicoDelta)(this)).BeginGetHashesForFile(callback, asyncState);
        }
        
        private object[] OnEndGetHashesForFile(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<long, PicoDeltaSl.FileHash> retVal = ((PicoDeltaSilverlightClient.PicoDeltaService.IPicoDelta)(this)).EndGetHashesForFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetHashesForFileCompleted(object state) {
            if ((this.GetHashesForFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetHashesForFileCompleted(this, new GetHashesForFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetHashesForFileAsync() {
            this.GetHashesForFileAsync(null);
        }
        
        public void GetHashesForFileAsync(object userState) {
            if ((this.onBeginGetHashesForFileDelegate == null)) {
                this.onBeginGetHashesForFileDelegate = new BeginOperationDelegate(this.OnBeginGetHashesForFile);
            }
            if ((this.onEndGetHashesForFileDelegate == null)) {
                this.onEndGetHashesForFileDelegate = new EndOperationDelegate(this.OnEndGetHashesForFile);
            }
            if ((this.onGetHashesForFileCompletedDelegate == null)) {
                this.onGetHashesForFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetHashesForFileCompleted);
            }
            base.InvokeAsync(this.onBeginGetHashesForFileDelegate, null, this.onEndGetHashesForFileDelegate, this.onGetHashesForFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PicoDeltaSilverlightClient.PicoDeltaService.IPicoDelta.BeginDownloadCurrentConfig(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDownloadCurrentConfig(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PicoDeltaSl.Config PicoDeltaSilverlightClient.PicoDeltaService.IPicoDelta.EndDownloadCurrentConfig(System.IAsyncResult result) {
            return base.Channel.EndDownloadCurrentConfig(result);
        }
        
        private System.IAsyncResult OnBeginDownloadCurrentConfig(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((PicoDeltaSilverlightClient.PicoDeltaService.IPicoDelta)(this)).BeginDownloadCurrentConfig(callback, asyncState);
        }
        
        private object[] OnEndDownloadCurrentConfig(System.IAsyncResult result) {
            PicoDeltaSl.Config retVal = ((PicoDeltaSilverlightClient.PicoDeltaService.IPicoDelta)(this)).EndDownloadCurrentConfig(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDownloadCurrentConfigCompleted(object state) {
            if ((this.DownloadCurrentConfigCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DownloadCurrentConfigCompleted(this, new DownloadCurrentConfigCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DownloadCurrentConfigAsync() {
            this.DownloadCurrentConfigAsync(null);
        }
        
        public void DownloadCurrentConfigAsync(object userState) {
            if ((this.onBeginDownloadCurrentConfigDelegate == null)) {
                this.onBeginDownloadCurrentConfigDelegate = new BeginOperationDelegate(this.OnBeginDownloadCurrentConfig);
            }
            if ((this.onEndDownloadCurrentConfigDelegate == null)) {
                this.onEndDownloadCurrentConfigDelegate = new EndOperationDelegate(this.OnEndDownloadCurrentConfig);
            }
            if ((this.onDownloadCurrentConfigCompletedDelegate == null)) {
                this.onDownloadCurrentConfigCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDownloadCurrentConfigCompleted);
            }
            base.InvokeAsync(this.onBeginDownloadCurrentConfigDelegate, null, this.onEndDownloadCurrentConfigDelegate, this.onDownloadCurrentConfigCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PicoDeltaSilverlightClient.PicoDeltaService.IPicoDelta.BeginUploadManifest(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUploadManifest(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void PicoDeltaSilverlightClient.PicoDeltaService.IPicoDelta.EndUploadManifest(System.IAsyncResult result) {
            base.Channel.EndUploadManifest(result);
        }
        
        private System.IAsyncResult OnBeginUploadManifest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((PicoDeltaSilverlightClient.PicoDeltaService.IPicoDelta)(this)).BeginUploadManifest(callback, asyncState);
        }
        
        private object[] OnEndUploadManifest(System.IAsyncResult result) {
            ((PicoDeltaSilverlightClient.PicoDeltaService.IPicoDelta)(this)).EndUploadManifest(result);
            return null;
        }
        
        private void OnUploadManifestCompleted(object state) {
            if ((this.UploadManifestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UploadManifestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UploadManifestAsync() {
            this.UploadManifestAsync(null);
        }
        
        public void UploadManifestAsync(object userState) {
            if ((this.onBeginUploadManifestDelegate == null)) {
                this.onBeginUploadManifestDelegate = new BeginOperationDelegate(this.OnBeginUploadManifest);
            }
            if ((this.onEndUploadManifestDelegate == null)) {
                this.onEndUploadManifestDelegate = new EndOperationDelegate(this.OnEndUploadManifest);
            }
            if ((this.onUploadManifestCompletedDelegate == null)) {
                this.onUploadManifestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadManifestCompleted);
            }
            base.InvokeAsync(this.onBeginUploadManifestDelegate, null, this.onEndUploadManifestDelegate, this.onUploadManifestCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override PicoDeltaSilverlightClient.PicoDeltaService.IPicoDelta CreateChannel() {
            return new PicoDeltaClientChannel(this);
        }
        
        private class PicoDeltaClientChannel : ChannelBase<PicoDeltaSilverlightClient.PicoDeltaService.IPicoDelta>, PicoDeltaSilverlightClient.PicoDeltaService.IPicoDelta {
            
            public PicoDeltaClientChannel(System.ServiceModel.ClientBase<PicoDeltaSilverlightClient.PicoDeltaService.IPicoDelta> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetHashesForFile(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetHashesForFile", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<long, PicoDeltaSl.FileHash> EndGetHashesForFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<long, PicoDeltaSl.FileHash> _result = ((System.Collections.Generic.Dictionary<long, PicoDeltaSl.FileHash>)(base.EndInvoke("GetHashesForFile", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDownloadCurrentConfig(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("DownloadCurrentConfig", _args, callback, asyncState);
                return _result;
            }
            
            public PicoDeltaSl.Config EndDownloadCurrentConfig(System.IAsyncResult result) {
                object[] _args = new object[0];
                PicoDeltaSl.Config _result = ((PicoDeltaSl.Config)(base.EndInvoke("DownloadCurrentConfig", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUploadManifest(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("UploadManifest", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUploadManifest(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UploadManifest", _args, result);
            }
        }
    }
}
